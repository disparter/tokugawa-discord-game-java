plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'io.github.disparter.tokugawa'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Configuração do sourceSet functionalTest
sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.discord4j:discord4j-core:3.2.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // Dependências dos testes funcionais
    functionalTestImplementation 'io.cucumber:cucumber-java:7.14.0'
    functionalTestImplementation 'io.cucumber:cucumber-junit-platform-engine:7.14.0'
    functionalTestImplementation 'io.cucumber:cucumber-spring:7.14.0'
    functionalTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    functionalTestImplementation 'org.junit.platform:junit-platform-suite:1.10.0'
    functionalTestImplementation 'org.testcontainers:testcontainers:1.19.3'
    functionalTestImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    functionalTestImplementation 'org.testcontainers:postgresql:1.19.3'
    functionalTestImplementation 'com.github.tomakehurst:wiremock-standalone:3.0.1'
    functionalTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    functionalTestImplementation 'org.springframework.boot:spring-boot-starter-web'
    functionalTestImplementation 'org.awaitility:awaitility:4.2.0'
    functionalTestImplementation 'com.google.code.gson:gson:2.10.1'
    functionalTestImplementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    functionalTestCompileOnly 'org.projectlombok:lombok'
    functionalTestAnnotationProcessor 'org.projectlombok:lombok'
}

// Task to check if PostgreSQL is running
task checkPostgresRunning {
    doLast {
        def isRunning = false
        try {
            def process = "scripts/start_postgres.sh".execute()
            process.waitFor()
            isRunning = (process.exitValue() == 0)
        } catch (Exception e) {
            println "Error checking PostgreSQL status: ${e.message}"
            isRunning = false
        }

        if (!isRunning) {
            println "ERROR: PostgreSQL is not running. Please start PostgreSQL using scripts/start_postgres.sh"
            // Fail the build
            throw new RuntimeException("PostgreSQL is not running")
        } else {
            println "PostgreSQL is running."
        }
    }
}

// Task to export environment variables
task exportEnvironmentVariables {
    doLast {
        def exportProcess = "scripts/export_env.sh".execute()
        exportProcess.waitFor()

        if (exportProcess.exitValue() != 0) {
            println "ERROR: Failed to export environment variables. Check scripts/export_env.sh"
            // Fail the build
            throw new RuntimeException("Failed to export environment variables")
        } else {
            println "Environment variables exported successfully."
        }
    }
}

// Configuração para tarefas de teste
task functionalTest(type: Test) {
    description = 'Executa os testes funcionais.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
    shouldRunAfter test
}

// Configuração para lidar com arquivos duplicados
tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// These tasks can be run manually when needed
// bootJar.dependsOn checkPostgresRunning, exportEnvironmentVariables

tasks.named('test') {
    useJUnitPlatform()
}

// Adiciona os testes funcionais à task de check
check.dependsOn functionalTest
