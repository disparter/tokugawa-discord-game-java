name: Continuous Integration

on:
  pull_request:
    branches: [ master, develop ]
  push:
    branches: [ master, develop ]

env:
  JAVA_VERSION: '21'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      checks: write
      pull-requests: write
      
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: tokugawa_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            javaapp/.gradle/caches
            javaapp/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('javaapp/**/*.gradle*', 'javaapp/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradlew Executable
        run: chmod +x javaapp/gradlew
        
      - name: Validate Gradle Wrapper
        run: |
          cd javaapp
          ./gradlew wrapper --gradle-version=$(grep "distributionUrl" gradle/wrapper/gradle-wrapper.properties | sed 's/.*gradle-\(.*\)-bin.zip/\1/')

      - name: Setup Test Environment
        run: |
          cd javaapp
          # Criar diret칩rios necess치rios para os testes
          mkdir -p src/functionalTest/resources/wiremock/__files
          mkdir -p target/cucumber-reports
          
          # Configurar vari치veis de ambiente para testes
          echo "SPRING_PROFILES_ACTIVE=test" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/tokugawa_test" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=test" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=test" >> $GITHUB_ENV
          echo "DISCORD_TOKEN=test-token-for-ci" >> $GITHUB_ENV

      - name: Build Project
        run: |
          cd javaapp
          ./gradlew clean compileJava compileTestJava compileFunctionalTestJava --stacktrace

      - name: Run Unit Tests
        id: unit-tests
        run: |
          cd javaapp
          ./gradlew test --stacktrace --continue
        env:
          SPRING_PROFILES_ACTIVE: test
        continue-on-error: true

      - name: Analyze Unit Test Failures
        if: steps.unit-tests.outcome == 'failure'
        run: |
          cd javaapp
          echo "::warning title=Unit Tests Failed::Some unit tests are failing. Check the test reports for details."
          # Collect failed test info for auto-fix suggestions
          find build/test-results/test -name "*.xml" -exec grep -l "failure\|error" {} \; | head -10 > failed-unit-tests.txt || true
          if [ -s failed-unit-tests.txt ]; then
            echo "::notice title=Failed Unit Tests::$(cat failed-unit-tests.txt | xargs basename -s .xml | tr '\n' ', ')"
          fi

      - name: Run Functional Tests
        id: functional-tests
        run: |
          cd javaapp
          ./gradlew functionalTest --stacktrace --continue
        env:
          SPRING_PROFILES_ACTIVE: test
          TESTCONTAINERS_REUSE_ENABLE: true
        continue-on-error: true

      - name: Analyze Functional Test Failures
        if: steps.functional-tests.outcome == 'failure'
        run: |
          cd javaapp
          echo "::warning title=Functional Tests Failed::Some functional tests are failing. Check the test reports for details."
          # Collect failed functional test info for auto-fix suggestions
          find build/test-results/functionalTest -name "*.xml" -exec grep -l "failure\|error" {} \; | head -10 > failed-functional-tests.txt || true
          if [ -s failed-functional-tests.txt ]; then
            echo "::notice title=Failed Functional Tests::$(cat failed-functional-tests.txt | xargs basename -s .xml | tr '\n' ', ')"
          fi
          
          # Check for common issues
          if grep -q "ConnectionException\|ConnectException" build/test-results/functionalTest/*.xml 2>/dev/null; then
            echo "::notice title=Connection Issues::Database or service connection issues detected. Check Testcontainers setup."
          fi
          
          if grep -q "WireMockException" build/test-results/functionalTest/*.xml 2>/dev/null; then
            echo "::notice title=WireMock Issues::WireMock service issues detected. Check mock configurations."
          fi

      - name: Generate Test Summary
        if: always()
        run: |
          cd javaapp
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          
          # Unit tests summary
          if [ -f "build/test-results/test/TEST-*.xml" ]; then
            UNIT_TOTAL=$(grep -r "tests=" build/test-results/test/*.xml | head -1 | sed 's/.*tests="\([0-9]*\)".*/\1/' || echo "0")
            UNIT_FAILURES=$(grep -r "failures=" build/test-results/test/*.xml | head -1 | sed 's/.*failures="\([0-9]*\)".*/\1/' || echo "0")
            UNIT_ERRORS=$(grep -r "errors=" build/test-results/test/*.xml | head -1 | sed 's/.*errors="\([0-9]*\)".*/\1/' || echo "0")
            echo "### Unit Tests: $UNIT_TOTAL total, $UNIT_FAILURES failures, $UNIT_ERRORS errors" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Functional tests summary
          if [ -f "build/test-results/functionalTest/TEST-*.xml" ]; then
            FUNC_TOTAL=$(grep -r "tests=" build/test-results/functionalTest/*.xml | head -1 | sed 's/.*tests="\([0-9]*\)".*/\1/' || echo "0")
            FUNC_FAILURES=$(grep -r "failures=" build/test-results/functionalTest/*.xml | head -1 | sed 's/.*failures="\([0-9]*\)".*/\1/' || echo "0")
            FUNC_ERRORS=$(grep -r "errors=" build/test-results/functionalTest/*.xml | head -1 | sed 's/.*errors="\([0-9]*\)".*/\1/' || echo "0")
            echo "### Functional Tests: $FUNC_TOTAL total, $FUNC_FAILURES failures, $FUNC_ERRORS errors" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Auto-fix suggestions
          if [ "${{ steps.unit-tests.outcome }}" == "failure" ] || [ "${{ steps.functional-tests.outcome }}" == "failure" ]; then
            echo "### 游댢 Auto-Fix Suggestions" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`./gradlew clean test functionalTest\` locally to reproduce issues" >> $GITHUB_STEP_SUMMARY
            echo "2. Check database connectivity for functional tests" >> $GITHUB_STEP_SUMMARY
            echo "3. Verify WireMock configurations and templates" >> $GITHUB_STEP_SUMMARY
            echo "4. Ensure all Step definitions are properly implemented" >> $GITHUB_STEP_SUMMARY
            echo "5. Check for missing test dependencies in build.gradle" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: |
            javaapp/build/test-results/test/*.xml
            javaapp/build/test-results/functionalTest/*.xml
          reporter: java-junit

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            javaapp/build/reports/
            javaapp/build/test-results/
          retention-days: 7

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            javaapp/build/reports/jacoco/
            javaapp/build/jacocoHtml/
          retention-days: 7

      - name: Comment Test Results on PR
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: github.event_name == 'pull_request'
        with:
          files: |
            javaapp/build/test-results/test/*.xml
            javaapp/build/test-results/functionalTest/*.xml
          comment_mode: create new
          check_name: "Test Results"
          report_individual_runs: true
          dedupe_classes_by_file_name: false

      - name: Build Application JAR
        if: success()
        run: |
          cd javaapp
          ./gradlew bootJar --stacktrace

      - name: Upload Build Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: tokugawa-discord-game
          path: javaapp/build/libs/*.jar
          retention-days: 7

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          cd javaapp
          docker build -t tokugawa-discord-game:test .

      - name: Test Docker Image
        run: |
          # Executar um teste b치sico do container
          docker run --rm tokugawa-discord-game:test --help || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'javaapp'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'